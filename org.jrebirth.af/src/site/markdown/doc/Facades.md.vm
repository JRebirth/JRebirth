<head>
<![CDATA[
	<title>Understand Facades</title>
	<link rel="stylesheet" type="text/css" href="../css/shCoreEclipse.css" media="all" />
]]>
</head>

<div id="catcherTitle">Facades Area</div>
<div id="catcherContent">Simplify component accessibility.</div>

#if(!$all)
<!-- MACRO{toc|section=0|fromDepth=1|toDepth=4|class=toc} -->
#end   

#[[
  
Facade(s)
=========================

JRebirth provides 4+1 **Facade**s used to manage its dedicated pattern **wB-CS-Mvc**.

Overview
-------------

<span style="text-decoration: underline;">Short UML Diagram:</span>

<div class="uml">
	<a title="Facade Class Diagram " rel="lightbox" href="uml/Facade.png">
		<img class="redux" alt="" src="uml/Facade.png"/>
	</a>
</div>

Global Facade
=================

*One Facade to rule them all*

JRebirth uses a global facade automatically created by JRebirth	__AbstractApplication__	class. Its main role is to manage all JRebirth components by using Facades.


Internal Communication
---------------------------
	
The global facade creates automatically the JRebirth notification engine. You should read the [Notifier](Notifier.html) page to have more informations.
	

Linked with Application
---------------------------

The global facade also allows to communicate with the Application class and therefore with its stage and scene.
	

Manage Local Facades
-----------------------------

It allows to manage the three main facades (+extra one):

* CommandFacade
* ServiceFacade
* UiFacade
* BehaviorFacade


The __GlobaleFacadeBase__ allows to get each of these facades by calling appropriate getters:

<!-- MACRO{include|highlight-theme=eclipse|source=api/src/main/java/org/jrebirth/af/api/facade/GlobalFacade.java|snippet=re:LocalFacade}-->

This link is bidirectionnal because global facade is accessible from the 3 main facades by calling :

- *getGlobalFacade()* (each facade extends the __AbstractGlobalReady__ abstract class which implement __GlobalReady__ interface.

<!-- MACRO{include|source=api/src/main/java/org/jrebirth/af/api/facade/GlobalReady.java|snippet=re:globalFacade}-->



Local Facades
===================

There are 4 __LocalFacade__, each one is responsible of an area storing same kind of components.


Basic Features
--------------------

Each Facade can manage its components (also called readyObject) throught some public methods.

* register : store a pre-built component
* unregister : remove a component
* exists : check if the component is already registered, it could be released
* retrieve : used to get a component (build and register it if needed)

<!-- MACRO{include|source=api/src/main/java/org/jrebirth/af/api/facade/Facade.java|snippet=re:E extends R}-->


Component Key
-------------------

Each Component (b-CSM) are registered into the facade using a [UniqueKey](../apidocs/org/jrebirth/af/api/key/UniqueKey.html), there are 2 options:

* [ClassKey](#ClassKey)
* [MultitonKey](#MultitonKey)

### ClassKey

The simplest key is the [ClassKey](../apidocs/org/jrebirth/af/core/key/ClassKey.html), it's only composed by the class object of the component, thus the can only be stored once into the facade (=singleton).


### MultitonKey

The [MultitonKey](../apidocs/org/jrebirth/af/core/key/MultitonKey.html) uses also the class of the component but add a variable part to be able to store several instances of a same Component.

### Convenient Builder

JRebirth API has got a lot of methods that take the Component Class with additional objects as key parts, but the API also provides a convenient class used to build key.

<!-- MACRO{include|source=core/src/main/java/org/jrebirth/af/core/key/Key.java|snippet=re:static}-->
	

Provide Tracking
--------------------

JRebirth allows to track all creation &amp; finalization of each component (Command, Service, Model, Behavior) and also track the emission of waves and their path.
	
They are logged in order to be processed later by the JRebirthAnalyzer tool.

]]#

#if( !$all )
#parse("TocList.vm")
#displayFooterToc("Facades")
#end
