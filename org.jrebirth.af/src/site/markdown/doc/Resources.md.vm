<head>
<![CDATA[
	<title>Resources</title>
	<link rel="stylesheet" type="text/css" href="../css/shCoreEclipse.css" media="all" />
]]>
</head>

<div id="catcherTitle">Using Resources</div>
<div id="catcherContent">Decrease your memory footprint by using resource wrapper</div>

#if(!$all)
<!-- MACRO{toc|section=0|fromDepth=1|toDepth=4|class=toc} -->
#end   

#[[

Resources
=========================

The JRebirth Framework provides an useful way to deal with your local resources, we currently support :

* Colors
* Fonts
* Images
* Parameters
* CSS
* FXML
* AudioClip (WIP)
* Media (WIP)

These resources can consume a lot of memory if you don't dispose them (especially big images and fonts) when you stop using them. 
JRebirth provides a mechanism to store them weakly and to rebuild them if necessary in order to	use the less memory as required.
To do this JRebirth stores a **ResourceParam** lightweight object that contains all information to create the heavyweight resource.
This one is linked by a **ResourceItem** to facilitate its usage.

<span style="text-decoration: underline;">UML Diagram Overview:</span>

<div class="uml">
	<a href="uml/Resource.png" rel="lightbox" title="Resources Class Diagram ">
		<img class="redux" src="uml/Resource.png" alt="" />
	</a>
</div>

Resource loading
----------------------

Heavyweight resource object can be retrieved by calling the _get()_ method of **ResourceItem**.
If the resource was already loaded it is retrieved from cache otherwise it's loaded another time and stored weakly.
When system goes low memory, all resrouces not strictly retained by a Component or a **Scene**'s node will elligible for garbage collection to release some bits. 

ResourceItem
-----------------

There are 3 ways to declare resources, each one is available for all kind of resources with special feature for parameters.

* [With Resources.create(ResourceParam)](#create)
* [With Enumeration allowing customization](#enum)
* [Dynamically](#dynamic)


<a name="create"></a>
### With Resources.create(ResourceParam)
	
The first way is to hold static field declaration instantiated  with custom 'factory' Resources (not named, with an overloaded create method to avoid later cast).
This static fields can be hold in any class you want but we recommend to store them into an **Interface** used 'as' an enum.
It's better to have an interface per resource type to avoid big file that blends all resources.
Another interesting trick, is to add a static import on related static Resource.create method to shorten the resource declaration (Ctrl+Shift+M with Eclipse).
	
Static import declaration:
<!-- MACRO {include|highlight-theme=eclipse|source=core/src/test/java/org/jrebirth/af/core/resource/color/TestColors.java|snippet=re:import static|snippet-start-offset=1}-->

Example of Web color declaration:
<!-- MACRO {include|source=core/src/test/java/org/jrebirth/af/core/resource/color/TestColors.java|snippet=re:TEST_COLOR_WEB_1|snippet-start-offset=1}-->

<a name="enum"></a>
### With Enumeration

The other way to declare is a little bit complex, it implies to create an _enum_ that implements a **ResourceItem** interface.
But it requires to add use a custom syntax to use default method.

<!-- MACRO {include|source=core/src/test/java/org/jrebirth/af/core/resource/color/EnumColors.java|snippet=aj:..EnumColors}-->

Severals default methods exist, at least one per **ResourceParams** to create.


<a name="dynamic"></a>
### Dynamically

We can load dynamicalli resource by creating "anonymous" **ResourceItem**, the resource will be kept within cache if memory is not constrained otherwise it will be deleted.
Another call with the same path will hit the cache and the image will be only stored once, but created as many times as deleted and retrieved again.

<!-- MACRO {include|source=presentation/src/main/java/org/jrebirth/af/presentation/ui/template/AbstractTemplateView.java|snippet=re:new RelImage}-->

In this sample _item.getImage()_ return the relative srtring path of the image.


Samples
----------------

### Color

For example to manage web color, (basic hexadecimal string #00CC00), you have to use this declaration:
<!-- MACRO {include|source=core/src/test/java/org/jrebirth/af/core/resource/color/TestColors.java|snippet=re:TEST_COLOR_WEB_1|snippet-start-offset=1}-->


### Font

For example to manage the **Turtles** font, you have to use this declaration:
<!-- MACRO {include|source=core/src/test/java/org/jrebirth/af/core/resource/font/TestFonts.java|snippet=re:TEST_REAL_FONT_1|snippet-start-offset=1}-->

Hereafter the enumeration that stores font names.

<!-- MACRO {include|source=core/src/test/java/org/jrebirth/af/core/resource/font/TestFontNames.java|snippet=aj:..TestFontNames}-->

]]#

#if( !$all )
#parse("TocList.vm")
#displayFooterToc("Resources")
#end