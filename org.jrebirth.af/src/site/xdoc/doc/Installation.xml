<!DOCTYPE document [
        <!-- These are the entity sets for ISO Latin 1 characters for the XHTML -->
        <!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">
        %HTMLlat1;
        <!-- These are the entity sets for special characters for the XHTML -->
        <!ENTITY % HTMLsymbol PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent">
        %HTMLsymbol;
        <!-- These are the entity sets for symbol characters for the XHTML -->
        <!ENTITY % HTMLspecial PUBLIC "-//W3C//ENTITIES Special for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent">
        %HTMLspecial;
        ]>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Installation</title>
    </properties>

    <head>
        <title></title>
        <link rel="stylesheet" type="text/css" href="../css/shCoreEclipse.css" media="all"/>
    </head>

    <body>

        <div class="toc">
            <macro name="toc">
                <param name="section" value="0"/>
                <param name="fromDepth" value="0"/>
                <param name="toDepth" value="3"/>
            </macro>
        </div>

        <section name="Installation" id="Installation">

            <div id="catcherTitle">How to use JRebirth Application Framework</div>
            <div id="catcherContent">This page will help you setting up your project to work with JRebirth.</div>

            <subsection name="Manual Download" id="ManualDownload">

                <p>JRebirth is composed by a set of jar files, you just have to add them
                    into your application classpath to use them.
                </p>
                <p>To get them you can download manually JRebirth distribution archive directly from the home page or here:<br />
                <a href="http://apps.jrebirth.org/org.jrebirth.af/">apps.jrebirth.org</a>
                </p>
                <p>This distribution mode will be improved in the future for those you
                    don't want to deal with an artifact repository.
                </p>

            </subsection>

            <subsection id="Maven" name="Maven Way">
                <p>
                    Currently the easy way to get all JRebirth jar files is to use maven
                    convention.
                </p>

                <p>You just need to add these dependencies into your pom.xml to begin to play with
                    JRebirth Core features.<br />
                    The first one is an optional library used to manage logs.
                    The second one is the core library of JRebirth Application Framework.
                    The last one is used to displayed basic JRebirth Preloader.<br />
                </p>

                <macro name="include">
                    <param name="highlight-theme" value="eclipse"/>
                    <param name="source" value="../../../showcase/pom.xml"/>
                    <param name="snippet" value="xp:/project/dependencies"/>
                </macro>

                <p>We will see in the next chapter how to configure your build to get all JRebirth dependencies.</p>
            </subsection>
        </section>

        <section name="Maven Repositories" id="MavenRepositories">

            <p>Choose your destiny ! <br/>
                ...and finish brillantly your wonderful application :)</p>
                
            <p>All JRebirth libraries are pushed to several repositories and you must choose how you want to retrieve them.<br />
                They are pushed in this order :
            </p>
            <ol>
                <li>
                    <a href="#ojo">OJO, Open Source Repository hosted by JFrog and powered by Artifactory (Snapshots and Releases)</a>
                    <a href="http://oss.jfrog.org">oss.jfrog.org</a>
                </li>
                <li>
                    <a href="#bintray">Our public repository powered by Bintray (Only Releases, On demand Jenkins build)</a>
                </li>
                <li>
                    <a href="#jcenter">JCenter Bintray repository (Only Releases, Superset of Maven Central)</a>
                </li>
                <li>
                    <a href="#repo">Our internal repository powered by Artifactory (could be
                        offline)
                    </a>
                </li>
                <li>
                    <a href="#central">Maven Central, all releases are synchronized with Central repository
                    </a>
                </li>
                <li>
                    <a href="#hybrid">Any subset of all available repositories</a>
                </li>
            </ol>

            <p>
                <em>JRebirth is published on Maven Central repository with the help of Bintray synchronization (without having to modify your pom files).
                </em><br />
                If you don't want to bother yourself with all these settings, you should just proxy <b>JCenter</b> repository.
            </p>

            <p>
                When searching the latest versio of JRebirth, the first location to check is
                <b>OJO</b>
                because Releases and Snapshots are pushed automatically to it, so check it out first !
            </p>

            <p>Let's have a macro look on all these alternatives.</p>


            <subsection id="ojo" name="OJO Repo">
                <p>
                    JRebirth is firstly pushed to OJO (
                    <a href="http://oss.jfrog.org/simple/oss-release-local/org/jrebirth/">
                        oss.jfrog.org/simple/oss-release-local/org/jrebirth/
                    </a>
                    - Open Source Software repo provided by JFrog as an artifactory instance ).
                </p>
                <p>
                    You have 2 ways to plug your maven build to this server:
                    <ol>
                        <li>
                            <a href="#ojopom">Add a repositories section into the pom.xml of your project.</a>
                        </li>
                        <li>
                            <a href="#ojosettings">Add a profile section into your settings.xml</a>
                        </li>
                    </ol>
                </p>
                
				<a name="ojopom" />
                <h4>OJO into Pom.xml</h4>
                <p>You can simply add this declaration into your
                    <b>pom.xml</b>
                    file to let Maven downloading all
                    JRebirth dependencies.
                    <br/>
                    A lot of people don't recommend to put repositories declaration into pom files, because a Maven build
                    should only depend on Maven Central dependencies without any third library repositories.
                    <br/>
                    JRebirth is not pushed yet on Maven Central repo, so this snippet does the trick to start to work.
                </p>
                <macro name="include">
                    <param name="source" value="../includes/Pom_Repositories.xml"/>
                    <param name="snippet" value="xp://repositories"/>
                </macro>

				<a name="ojosettings" />
                <h4>OJO into Settings.xml</h4>
                <p>This way is so far better but has an important drawback, your build won't work if you don't use
                    the right profile.
                    <br/>
                    So you should share this declaration somewhere in order to let your project 'buildable' by other
                    contributors.
                </p>
                <macro name="include">
                    <param name="source" value="../includes/OJO_Profile_Settings.xml"/>
                    <param name="snippet" value="xp://profiles"/>
                </macro>

            </subsection>

             <subsection name="Bintray" id="bintray">

                <p>JRebirth artifacts are pushed to
                    <a href="https://bintray.com/pkg/show/general/jrebirth/JRebirth/JRebirth">Bintray</a>
                    repository and then automatically synchronized to JCenter main Bintray repository.
                    Only release version are managed. These repository can also host other kind of binaries.
                </p>
                <p>It's possible to add only JRebirth Bintray repository to your project, but it's more convenient to
                    add JCenter repository which aggregate all configured Bintray repositories .</p>

            </subsection>

            <subsection id="jcenter" name="JCenter">
            
                <p>JCenter is a new social Java repository hosted on Bintray website. It allows to broadcast thousand of
                    libraries without the pitfall to
                    update your pom.xml in order to push them on a proxy
                    repository.
                    JCenter is absolutely a fabulous alternative to Maven Central, moreover since it has became a superset of Maven Central.
                </p>

                <p>If you want to use JCenter repository, you must add this into your Maven settings.xml.
                    Pay attention that at this time JCenter contains only 'Release' artifacts, no 'Snapshot' versions
                </p>
                
                <macro name="include">
                    <param name="source" value="../includes/JCenter_Profile_Settings.xml"/>
                    <param name="snippet" value="xp://profiles" />
                </macro>
				
				<p></p>

            </subsection>


            <subsection id="repo" name="JRebirth Repo">
                <p>
                    JRebirth has its own artifact repository (
                    <a href="http://repo.jrebirth.org">repo.jrebirth.org</a>
                    ), but the server is not 7/7 24/24 ready due to energy savings. It could be offline when you need to
                    recompile your application, so you shouldn't use it into your builds.
                    It's mainly used as proxy for our developers, although it also hosts all JRebirth binaries (like Applications) that are not pushed on OJO or Bintray.
                </p>


                <p>
                    You have 2 ways to plug your maven build to our server:
                    <ol>
                        <li>Add a repositories section into the pom.xml of your project</li>
                        <li>Add a profile section into your settings.xml</li>
                    </ol>
                </p>

				<a name="jrreposettings" />
                <h4>JRebirth repo into Settings.xml</h4>
                <macro name="include">
                    <param name="source" value="../includes/Artifactory_Profile_Settings.xml"/>
                    <param name="snippet" value="xp://profiles"/>
                </macro>

                <p>It's also possible to add this declaration into the profile section of
                    your user settings.xml or enterprise settings.xml
                </p>

            </subsection>

 			<subsection id="central" name="Maven Central">
                <p>
                    Maven Central is the default repository used by any Maven installation, so you don't have to configure something to be able to grab JRebirth artifacts.<br />
                    JRebirth artifacts are synchronized with Central since 7.7.0 version.
                </p>
            </subsection>

            <subsection name="Hybrid Configuration" id="hybrid">
                <p>You can add both OJO, JCenter, and JRebirth Artifactory repositories, if you want to
                    be up-to-date at any time.
                </p>

                <p>If you just want to deal with stable release use only OJO (Release repo) or JCenter.<br />
                    If sometimes you need to test a
                    Snapshot version use OJO (Snapshot repo) and our Artifactory instance or ask us a custom build.
                </p>

			 <a name="AllInOneProfile" />
             <h4>All-In-One Profile</h4>
                <p></p>
                <macro name="include">
                    <param name="source" value="../includes/All-In-One_Profile_Settings.xml"/>
                    <param name="snippet" value="xp://profiles"/>
                </macro>

           </subsection>

        </section>

        <div class="bottomLinks">
            <div class="previousDocPage">
                <a href="Introduction.html">Introduction</a>
            </div>
            <div class="nextDocPage">
                <a href="Application.html">Your first Application</a>
            </div>
            <div class="tocDocPage">
                <a href="Toc.html">TOC</a>
            </div>
        </div>

    </body>
</document> 	