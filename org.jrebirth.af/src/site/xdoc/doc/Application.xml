<!DOCTYPE document [
        <!-- These are the entity sets for ISO Latin 1 characters for the XHTML -->
        <!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">
        %HTMLlat1;
        <!-- These are the entity sets for special characters for the XHTML -->
        <!ENTITY % HTMLsymbol PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent">
        %HTMLsymbol;
        <!-- These are the entity sets for symbol characters for the XHTML -->
        <!ENTITY % HTMLspecial PUBLIC "-//W3C//ENTITIES Special for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent">
        %HTMLspecial;
        ]>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Application</title>
    </properties>

    <head>
        <title></title>
        <link rel="stylesheet" type="text/css" href="../css/shCoreEclipse.css" media="all"/>
    </head>

    <body>

        <div class="toc">
            <macro name="toc">
                <param name="section" value="0"/>
                <param name="fromDepth" value="0"/>
                <param name="toDepth" value="3"/>
            </macro>
        </div>

        <section name="Application">

            <div id="catcherTitle">Application Layer</div>
            <div id="catcherContent">How to create your first start class.</div>

            <subsection name="Overview">
                <p>JRebirth Application Framework offers a custom class that extends the
                    basic javafx.Application class, the aim is to automatically start
                    the JRebirth underlying Application Framework without doing
                    complex stuff.
                </p>
                <p>
                    <span style="text-decoration: underline;">Short UML Diagram:</span>
                </p>
                <div class="uml">
                    <a title="Application Class Diagram " rel="lightbox" href="uml/Application.png">
                        <img class="redux" alt="" src="uml/Application.png"/>
                    </a>
                    <legend>Application Class Diagram</legend>
                </div>

            </subsection>

            <subsection name="Application Start-Up">
                  <p>To trigger the start-up of your JavaFX application you must add a <i>static void main</i> method
                  in order to call one of the static protected method provided :</p>

                <macro name="include">
                    <param name="source" value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                    <param name="snippet" value="re:(void launchNow)|(void preloadAndLaunch)"/>
                </macro>

                <p>In example, <b>SampleApplication</b> will be launched with default JRebirth preloader
                    (Application and Preloader classes are omitted) like below:
                </p>

                <macro name="include">
                    <param name="source" value="sample/src/main/java/org/jrebirth/af/sample/SampleApplication.java"/>
                    <param name="snippet" value="aj:..SampleApplication.main(..)"/>
                    <param name="highlight-theme" value="eclipse"/>
                </macro>

				<p>If you want to use the <b>JRebirthPreloader</b>, you must include the JRebirth preloader artifact to your pom.xml file</p>
				
					<macro name="include">
						<param name="source" value="sample/pom.xml" />
						<param name="snippet" value="xp:/project/dependencies/dependency[3]" />
						<param name="set-first-line" value="1"/>
					</macro>

				<p>You can create your own <b>Preloader</b> class, JRebirth send only <b>ProgressNotification</b> with two kind of values:</p>
				<ul>
				<li>With double value: 0.0 to 1.0 to update the progress bar</li>
				<li>With integer value: > 1 to be translated into a message</li>
				</ul>
				<p>Hereafter you have the default <a class="apiClass" href="../apidocs/org/jrebirth/af/preloader/JRebirthPreloader.html">JRebirthPreloader</a> implementation.</p>
				
				<macro name="include">
                    <param name="source" value="preloader/src/main/java/org/jrebirth/af/preloader/JRebirthPreloader.java"/>
                    <param name="snippet" value="aj:org.jrebirth.af.preloader.JRebirthPreloader"/>
                </macro>
                
            </subsection>


            <subsection name="Application Customization">

                <p>To define your own Application class you have 2 options:</p>
                   <ul>
                       <li>Extend <a class="apiClass" href="../apidocs/org/jrebirth/af/core/application/AbstractApplication.html">AbstractApplication</a> and implement abstract methods</li>
                       <li>Extend <a class="apiClass" href="../apidocs/org/jrebirth/af/core/application/DefaultApplication.html">DefaultApplication</a> and only override abstract methods you need</li>
                   </ul>

                <p>The <b>AbstractApplication</b> class will do all extra stuff required to launch JRebirth engine.
                    You don't have to bother about it.
                    <br/>
                    This class skeleton provides some hooks to allow customization of the
                    application start up.
                </p>

                <p>Please note that one method is <b>mandatory</b> ! You must define a first Model Class to load
                    the first <b>Model</b> that will initialize the first <b>Node</b> attached to the RootNode (<em>automagically</em> created) )of your <b>Scene</b>.
                </p>
                <p>
                    If you have used the Maven archetype
                    <em>org.jrebirth.archetype</em>
                    you obtained this source code otherwise that you can copy-paste:
                </p>

                <macro name="include">
                    <param name="source" value="sample/src/main/java/org/jrebirth/af/sample/SampleApplication.java"/>
                    <param name="snippet" value="aj:SampleApplication"/>
                </macro>
                
                <p>The SampleModel.class is shown and explained into the <a href="Ui.html#Model_Overview">Ui</a> page.</p>

                <h4>Root Node</h4>
                <p>
                    <a class="apiClass" href="../apidocs/org/jrebirth/af/core/application/AbstractApplication.html">AbstractApplication</a> &amp; <a class="apiClass" href="../apidocs/org/jrebirth/af/core/application/DefaultApplication.html">DefaultApplication</a> classes are using a generic type that represents the
                    first JavaFX node hold by the scene. This node will be instantiated
                    automatically by the framework and could be accessed by
                    calling the
                    protected method
                    <a class="apiClass" href="../apidocs/org/jrebirth/af/core/application/AbstractApplication.html#getRootNode--">getRootNode()</a>.
                    You must define it in the class definition as generic type, this type must extend <b>Pane</b> class.
                </p>

                <h4>First Model Class</h4>
                <p>
                    The method
                    <em>Class&lt;? extends Model&gt; getFirstModelClass()</em>
                    is
                    mandatory to define which UI model will be attached to the root node of
                    the scene.
                </p>
                <p>This first model will be created into the JRebirth Thread Pool (JTP), then it
                    will be attached to the root node into the JavaFX Application Thread (JAT).
                </p>

                <h4>Application Title</h4>
                <p>
                    The method
                    <em>String getApplicationTitle()</em>
                    is simply used to
                    define the name of the application displayed by the stage (OS window)
                    and used by OS task bar.
                   
                </p>
                <p>By default it will retrieve values from properties file (default is <em>jrebirth.properties</em>):
                </p>
                <ul>
                	<li>applicationName={} powered by JRebirth ({} is replaced by application class simple name)</li>
                	<li>applicationVersion=1.0</li>
                </ul>


                <h4>Stage customization</h4>
                <p>
                    The first stage object is provided by the JavaFX launcher, the method
                    <em>void
                        customizeStage(final Stage stage)
                    </em>
                    allows doing some stage
                    customizations.
                </p>

                <h4>Scene customization</h4>
                <p>
                    The scene object automatically attached to the default stage stage is
                    built by the protected method
                    <em>Scene buildScene()</em>
                    that could be
                    overridden as needed. By defaut it creates a default scene with these
                    attributes :
                </p>
                <ul>
                    <li>Width = 800 (applicationSceneWidth parameter)</li>
                    <li>Height = 600 (applicationSceneHeight parameter)</li>
                    <li>Background Color = Transparent (applicationSceneBgColor parameter)</li>
                    <li>Root = Automatically built according to the generic type used</li>
                </ul>
                
                <p>
                    Theses properties are customizable with a properties file, this is explained below into the
                    Configuration section.
                </p>
                <p>
                    Another method let you customize the scene :
                    <em>void
                        customizeSscene(final Scene scene)
                    </em>.
                    For example you can listen
                    some key binding to perform a global action. The Presentation
                    application uses it to listen &lt;Ctrl&gt; + &lt;+&gt; and &lt;Ctrl&gt;
                    + &lt;-&gt; key combo to zoom in/out
                    the whole scene.
                </p>
                <p>
                    This method is also useful to attach a stylesheet to the scene like
                    this :
                    <em>scene.getStylesheets().add(loadCSS("style/sample.css"));</em>
                </p>

                <h4>Fonts preloading</h4>
                <p>
                    JavaFX applications are able to use fonts through programmatic
                    declarations or with CSS declaration (in .css files. or inline).
                    <br/>
                    If font used by CSS are not provided by the platform running the
                    application, it must be provided and loaded by the application.
                    <br/>
                    JRebirth provides a simple way to embed and declare font: this mechanism
                    is explained in the custom topic: Managing Fonts.
                </p>
                <p>
                    The method
                    <em>List&lt;FontEnum&gt; getFontToPreload()</em>
                    is used
                    to preload fonts to allow them to be used by CSS declaration. They are
                    loaded at boot in the same time than stylesheets.
                </p>
                <h4>Running Waves</h4>
                <p>The JRebirth Application class allow running Waves before and after the
                    creation of the first model class.
                </p>
                <p>A Wave is a JRebirth Event that could be process by any JRebirth
                    components, they are carrying throught JRebirth classes and threads.
                </p>
                <p>You can add your own wave with the two following methods :</p>
                <ul>
                    <li>
                        <em>
                            <span class="line line_alt">
                                <span class="doccomment">List&lt;Wave&gt;
                                    getPreBootWaveList()
                                </span>
                            </span>
                        </em>
                    </li>
                    <li>
                        <em>
                            <span class="line line_alt">
                                <span class="doccomment">List&lt;Wave&gt;
                                    getPostBootWaveList()
                                </span>
                            </span>
                        </em>
                    </li>
                </ul>
                <p>
                    The waves returnes will be processed
                    <strong>sequentially</strong>
                    althought they could be processed by different threads.
                </p>
                <p>
                    In this method you are allowed to call visible methods from the
                    <em>javafx.application.Application</em>
                    class, in example the
                    <em>getParameter()</em>
                    will give you the
                    arguments passed to command line
                </p>
                <p>Don't forget that you can chain your waves if you need to do more than
                    one thing.
                </p>
                <p>
                    <span style="text-decoration: underline;">JRebirth Analyzer example :</span>
                </p>

                <macro name="include">
                    <param name="source" value="showcase/analyzer/src/main/java/org/jrebirth/af/showcase/analyzer/JRebirthAnalyzer.java"/>
                    <param name="snippet" value="aj:..JRebirthAnalyzer.getPostBootWaveList(..)"/>
                </macro>

            <h4>Default key shortcuts</h4>

                <p>The AbstractApplication class is using two defaults hotkey:</p>
                <ul>
                    <li>
                        <macro name="include">
                            <param name="source"
                                   value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                            <param name="snippet" value="re:(KeyCode getFullScreenKeyCode)"/>
                        </macro>
                        <em>KeyCode getFullScreenKeyCode()</em>
                        =&gt; to go to to fullscreen
                        mode (default is &lt;
                        <strong>F10</strong>
                        &gt;)
                    </li>
                    <li>
                        <macro name="include">
                            <param name="source"
                                   value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                            <param name="snippet" value="re:(KeyCode getIconifiedKeyCode)"/>
                        </macro>
                        <em>KeyCode getIconifiedKeyCode()</em>=&gt;
                        to go to iconified
                        mode
                        <em>
                        </em>(default
                        is &lt;
                        <strong>F11</strong>
                        &gt;)
                    </li>
                </ul>
                <p>
                    These methods could be overridden if you want to change them, you can
                    avoid these shortcut by returning
                    <em>null</em>
                    .
                </p>

            <h4>Exception Manager</h4>
                <p>
                    JRebirth creates its own uncaught exception handlers in order to log
                    exceptions that were not caught by application code.
                    <br/>
                    It's possible to customize them by overriding methods listed hereafter:
                </p>
                <ul>
                    <li>Exception handler of the JavaFX Application Thread</li>
                    <macro name="include">
                        <param name="source"
                               value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                        <param name="snippet" value="re:(UncaughtExceptionHandler getJatUncaughtExceptionHandler)"/>
                    </macro>
                    <li>Exception handler of the JRebirth Internal Thread</li>
                    <macro name="include">
                        <param name="source"
                               value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                        <param name="snippet" value="re:(UncaughtExceptionHandler getJitUncaughtExceptionHandler)"/>
                    </macro>
                    <li>Default Exception handler of all other threads</li>
                    <macro name="include">
                        <param name="source"
                               value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                        <param name="snippet" value="re:(UncaughtExceptionHandler getDefaultUncaughtExceptionHandler)"/>
                    </macro>
                </ul>

            </subsection>


            <subsection name="Initialization Phases">
                <p>JavaFX applications haves 2 main phases while starting up:</p>
                <ul>
                    <li><a href="#InitPhase">init</a></li>
                    <li><a href="#StartPhase">start</a></li>
                </ul>

                <h4>Init Phase</h4>
                <p>The Initialization phase is composed by:</p>
                <ul>
                    <li>00-10% - Begin Initialization (Loading Resources transition)</li>
                    <li>10-30% - Customizable Pre-Init Steps</li>
                    <li>30-40% - Loading Message Files</li>
                    <li>40-50% - Loading Configuration Files</li>
                    <li>50-60% - Attach Exception Handler and Prepare the JIT</li>
                    <li>60-70% - Preload Fonts and attach CSS Files</li>
                    <li>70-90% - Customizable Pre-Init Steps</li>
                    <li>100% - trigger the start phase</li>
                </ul>

                <p>Customizable steps are handled by 2 methods to override:</p>

                <macro name="include">
                    <param name="source"
                           value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                    <param name="snippet" value="re:void preInit\(\)"/>
                    <param name="snippet-start-offset" value="3" />
                </macro>
                <p> You can use <i>notifyPreloader(new ProgressNotification(PROGRESS))</i> method where PROGRESS value
                    is between 0.11 and 0.29 in order to update finely the progression.<br />
                    You can also display custom message (understandable by your preloader) by calling
                    <i>notifyPreloader(new ProgressNotification(MESSAGE_ID))</i> where MESSAGE_ID is 200 or 300.
                </p>

                <macro name="include">
                    <param name="source"
                           value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                    <param name="snippet" value="re:void postInit\(\)"/>
                    <param name="snippet-start-offset" value="3" />
                </macro>
                <p> You can use <i>notifyPreloader(new ProgressNotification(PROGRESS))</i> method where PROGRESS value
                    is between 0.71 and 0.89 in order to update finely the progression.<br />
                    You can also display custom message (understandable by your preloader) by calling
                    <i>notifyPreloader(new ProgressNotification(MESSAGE_ID))</i> where MESSAGE_ID is 800 or 900.
                </p>


                <h4>Start Phase</h4>
                <p>The Start phase will build and attach the scene object.<br />
                Then it will start the <b>JRebirth Thread</b> (JIT) and show the stage.</p>

            </subsection>

        </section>

        <section name="Manage Configuration">
            <p>JRebirth provides a configuration engine that allow to parse configuration files and inject values into
                application.
            </p>

            <subsection name="@Configuration">
                <p>
                    Your application class can use the dedicated
                    <strong>@Configuration</strong>
                    annotation.
                    The
                    <strong>AbstractApplication</strong>
                    class use a default one:
                </p>

                <macro name="include">
                    <param name="source"
                           value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                    <param name="snippet" value="re:(@Configuration)"/>
                </macro>

                <p>Hereafter you have a full annotation usage:

                </p>
                <macro name="include">
                    <param name="source"
                           value="core/src/test/java/org/jrebirth/af/core/application/FullConfApplication.java"/>
                    <param name="snippet" value="re:(@Configuration)"/>
                </macro>


                <p>
                    This annotation has 3 properties:
                    <ul>
                        <li>value</li>
                        <li>extension</li>
                        <li>schedule</li>
                    </ul>
                </p>
                <h4>Value (default property)</h4>
                <p>
                    Define the wildcard used to find configuration files.
                    <br/>
                    The format is the same as Regex Pattern (ie: .*-jrebirth => for abc-jrebirth.EXTENSION files, abc
                    matches the .* regex part)
                    <br/>
                    The default value is empty, no search will be
                    done
                </p>

                <h4>Extension</h4>
                <p>
                    Define the file extension to find configuration files.
                    <br/>
                    The extension must not included the first dot (ie: properties => for abc-jrebirth.properties files)
                    <br/>
                    The default value is "properties" to load properties files
                </p>

                <h4>Schedule</h4>
                <p>
                    Define the delay used to check if the file has changed in order to reload configuration files.
                    <br/>
                    This value is in seconds.
                    <br/>
                    The default value is 0, no check will be done (this feature is still under development)
                </p>

            </subsection>

            <subsection name="Avoid Configuration">
                <p>
                    It's possible to avoid configuration mechanism, for example if you want to use your own and don't
                    need another process at start-up.
                    <br/>
                    You can disable it by setting an empty
                    <strong>@Configuration</strong>
                    annotation.

                </p>
                <macro name="include">
                    <param name="source"
                           value="core/src/test/java/org/jrebirth/af/core/application/NullConfApplication.java"/>
                    <param name="snippet" value="re:(@Configuration)"/>
                </macro>

            </subsection>

        </section>

        <section name="Manage Localization">
            <p>JRebirth provides a Internationalization engine that allow to localize internal resources and also your
                resources.
                It parses properties files and inject values into application.
            </p>

            <subsection name="@Localized">
                <p>
                    Your application class can use the dedicated
                    <strong>@Localized</strong>
                    annotation.
                    The
                    <strong>AbstractApplication</strong>
                    class use a default one:
                </p>

                <macro name="include">
                    <param name="source"
                           value="core/src/main/java/org/jrebirth/af/core/application/AbstractApplication.java"/>
                    <param name="snippet" value="re:(@Localized)"/>
                </macro>

                <p>
                    This annotation has 2 properties:
                    <ul>
                        <li>value</li>
                        <li>schedule</li>
                    </ul>
                </p>
                <h4>Value (default property)</h4>
                <p>
                    Define the wildcard used to find configuration files.
                    <br/>
                    The format is the same as Regex Pattern (ie: .*_rb => for MyMessages_rb.properties files,
                    MyMessages matches the .* regex part)
                    <br/>
                    The default value is empty, no search will be
                    done
                </p>

                <h4>Schedule</h4>
                <p>
                    Define the delay used to check if the file has changed in order to reload properties files.
                    <br/>
                    This value is in seconds.
                    <br/>
                    The default value is 0, no check will be done (this feature is still under development)
                </p>

            </subsection>

            <subsection name="Avoid Localization">
                <p>
                    It's possible to avoid localization mechanism, for example if you want to improve performance by
                    avoiding any translation into logs.
                    <br/>
                    You can disable it by setting an empty
                    <strong>@Localized</strong>
                    annotation.

                </p>
                <macro name="include">
                    <param name="source"
                           value="core/src/test/java/org/jrebirth/af/core/application/NullConfApplication.java"/>
                    <param name="snippet" value="re:(@Localized)"/>
                </macro>

            </subsection>

        </section>

        <div class="bottomLinks">
            <div class="previousDocPage">
                <a href="Overview.html">Framework Overview</a>
            </div>
            <div class="nextDocPage">
                <a href="Thread.html">Thread Management</a>
            </div>
            <div class="tocDocPage">
                <a href="Toc.html">TOC</a>
            </div>
        </div>

    </body>
</document> 	